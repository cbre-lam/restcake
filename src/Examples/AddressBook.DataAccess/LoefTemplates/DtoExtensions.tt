<#
	/*
	 * Sam Meacham (www.samscode.com)
	 * Template to auto generate DTO classes based on your entity data model (edmx).
	 */
	
	// To configure the options for this template, edit the DtoTemplateSettings.ttinclude file
	// Don't change this file unless you know what you're doing
	
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="LoefTemplateSettings.ttinclude" #>
<#@ output extension=".cs"#>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
using System;
using System.Collections.Generic;

namespace <#= dtoClassNamespace #>
{

	public static class DtoExtensionMethods
	{
<#
	foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
	{
#>
		/// <summary>
		/// Easily create DTO objects from actual domain entity objects
		/// </summary>
		public static <#=code.Escape(entity)#>[] ToEntities(this IEnumerable<<#=code.Escape(entity)#>Dto> dtos)
		{
			return AutoMapper.Mapper.Map<IEnumerable<<#=code.Escape(entity)#>Dto>, <#=code.Escape(entity)#>[]>(dtos);
		}
		
		public static IEnumerable<<#=code.Escape(entity)#>Dto> StripCycles(this IEnumerable<<#=code.Escape(entity)#>Dto> dtos)
		{
			foreach(<#=code.Escape(entity)#>Dto dto in dtos)
				dto.StripCycles();
			return dtos;
		}


		public static <#=code.Escape(entity)#> ToEntity(this <#=code.Escape(entity)#>Dto dto)
		{
			return AutoMapper.Mapper.Map<<#=code.Escape(entity)#>Dto, <#=code.Escape(entity)#>>(dto);
		}
		
<#
	}	
#>
	}
}

<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>

<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}
#>


