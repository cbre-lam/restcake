<#
	/*
	 * Sam Meacham (www.samscode.com)
	 * Template to auto generate ToDto() methods on each of the entity classes in your entity data model (edmx).
	 * This template also sets up some extension methods, to go to/from an IEnumerable of entities or dtos.
	 * As in, MyDtos[] dtos = myEntities.ToDtos();
	 */
	
	// To configure the options for this template, edit the DtoTemplateSettings.ttinclude file
	// Don't change this file unless you know what you're doing
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="LoefTemplateSettings.ttinclude" #>
<#@ output extension=".cs"#>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
using System;
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq.Expressions;
using Loef;
using <#= dtoClassNamespace #>;


namespace <#= entityClassNamespace #>
{
	public static class EntityExtensionMethods
	{
<#
	foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
	{
#>
		/// <summary>
    	/// Easily create DTO objects from actual domain entity objects
    	/// </summary>
    	public static <#=code.Escape(entity)#>Dto[] ToDtos(this IEnumerable<<#=code.Escape(entity)#>> entities)
    	{
    		return AutoMapper.Mapper.Map<IEnumerable<<#=code.Escape(entity)#>>, <#=code.Escape(entity)#>Dto[]>(entities);
    	}
		
		public static ObjectQuery<<#=code.Escape(entity)#>> EagerLoad(this ObjectQuery<<#=code.Escape(entity)#>> query, Expression<Func<<#=code.Escape(entity)#>.IncludeChain, IncludeChainBase>> expression)
		{
			IncludeChainBase chain = expression.Compile().Invoke(<#=code.Escape(entity)#>.s_includes);
			query = query.Include(chain.Value);
			return query;
		}
		
<#
	}	
#>
	}
}
<#


// ********************************************************************************
// *** Emit Entity Types **********************************************************
// ********************************************************************************
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(entity.Name + ".AutoGen.cs");
#>
using System;
using System.Data.Objects;
using System.Linq;
using System.Linq.Expressions;
using System.Collections.Generic;
using System.ComponentModel;
using Hyper.ComponentModel;
using Loef;
using <#= dtoClassNamespace #>;

namespace <#= entityClassNamespace #>
{
	[TypeDescriptionProvider(typeof(HyperTypeDescriptionProvider))]
	<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#> <#=code.StringBefore(" : ", code.Escape(entity.BaseType))#>
	{
		// Parameterless constructor, important for serialization
		public <#=code.Escape(entity)#>()
		{}
		
	
		public <#=code.Escape(entity)#>Dto ToDto()
		{
			return AutoMapper.Mapper.Map<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>Dto>(this);
		}
		
		
		public static <#= code.Escape(entity) #> GetByKey(<#= GetKeyType(entity) #> key)
		{
			return <#= dalClassName #>.Instance.<#= GetEntitySetName(ItemCollection, entity) #>.Where(obj => obj.<#= entity.KeyMembers[0].Name #> == key).SingleOrDefault();
		}
		
		
		public static <#= code.Escape(entity) #> GetByKey(<#= GetKeyType(entity) #> key, params string[] includes)
		{
			ObjectQuery<<#= code.Escape(entity) #>> q =
				(ObjectQuery<<#= code.Escape(entity) #>>)<#= dalClassName #>.Instance.<#= GetEntitySetName(ItemCollection, entity) #>
				.Where(obj => obj.<#= entity.KeyMembers[0].Name #> == key);
			
			q = q.DoIncludes(String.Join(",", includes));
			return q.SingleOrDefault();
		}
		
		
		public static <#= code.Escape(entity) #> GetByKey(<#= GetKeyType(entity) #> key, params Expression<Func<IncludeChain, IncludeChainBase>>[] expressions)
		{
			ObjectQuery<<#= code.Escape(entity) #>> q =
				(ObjectQuery<<#= code.Escape(entity) #>>)<#= dalClassName #>.Instance.<#= GetEntitySetName(ItemCollection, entity) #>
				.Where(obj => obj.<#= entity.KeyMembers[0].Name #> == key);

			foreach (Expression<Func<IncludeChain, IncludeChainBase>> exp in expressions)
			{
				IncludeChainBase chain = exp.Compile().Invoke(s_includes);
				q = q.Include(chain.Value);
			}

			return q.SingleOrDefault();
		}


		private static readonly PropertyDescriptorCollection s_properties = TypeDescriptor.GetProperties(typeof (<#=code.Escape(entity)#>));

		public void ApplyValues(IEnumerable<KeyValuePair<string, object>> values, bool throwOnBadProp = false)
		{
			foreach(KeyValuePair<string, object> pair in values)
			{
				try
				{
					PropertyDescriptor prop = s_properties[pair.Key];
					prop.SetValue(this, pair.Value);
				}
				catch (Exception)
				{
					if (throwOnBadProp)
						throw;
				}
			}
		}
		
		
		// ********************************************************************************
		// *** Include chain helpers ******************************************************
		// ********************************************************************************
		
		public class IncludeChain : IncludeChainBase
		{
<#
				foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
				{
#>
			private static readonly string _<#=code.Escape(navProperty)#> = "<#=code.Escape(navProperty)#>";
			public <#=code.Escape(navProperty.ToEndMember.GetEntityType())#>.IncludeChain <#=code.Escape(navProperty)#>
			{
				get { return Chain<<#=code.Escape(navProperty.ToEndMember.GetEntityType())#>.IncludeChain>(_<#=code.Escape(navProperty)#>); }
			}
			
<#
				}
#>
		}
		
		public static readonly IncludeChain s_includes = new IncludeChain();
	}
}	

<#
} // end foreach entity

fileManager.Process();
#>

