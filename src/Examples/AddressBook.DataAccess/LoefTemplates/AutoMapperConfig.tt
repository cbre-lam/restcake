<#
	/*
	 * Sam Meacham (www.samscode.com)
	 * Template to auto generate configuations for (entity => dto) and (dto => entity).
	 * Now works with lazy loading!  (See the .ForMember() parts of the configs)
	 */
	
	// To configure the options for this template, edit the DtoTemplateSettings.ttinclude file
	// Don't change this file unless you know what you're doing
	
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="LoefTemplateSettings.ttinclude" #>
<#@ output extension=".cs"#>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);

#>
using <#= dtoClassNamespace #>;

namespace <#= dtoClassNamespace #>
{
	/// <summary>
	/// Currently only supports Navigation properties, not complex properties.
	/// The .ForMember() calls prevent triggering lazy loading EF navigation properties.  If an EntityReference or
	/// EntityCollection has not been loaded, it will be ignored.
	/// </summary>
	public static class AutoMapperConfig
	{
		private static bool s_isInit = false;
		
		public static void CreateMappings()
		{
			if (s_isInit)
				return;
			s_isInit = true;

<#
			foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
			{
#>
			// AutoMapper config for <#= code.Escape(entity) #> => <#=code.Escape(entity)#>Dto
			AutoMapper.Mapper.CreateMap<<#= code.Escape(entity) #>, <#= code.Escape(entity) #>Dto>()<#
			if (modelHasLazyLoading)
			{
				foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
				{
					// Collections
					if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
					{
#>

				.ForMember(dto => dto.<#= code.Escape(navProperty) #>,
					options => options.MapFrom(obj => obj.<#=code.Escape(navProperty)#>.IsLoaded ? obj.<#=code.Escape(navProperty)#> : null))<#
					}
					else // Single instance
					{
#>

				.ForMember(dto => dto.<#= code.Escape(navProperty) #>,
					options => options.MapFrom(obj => obj.<#=code.Escape(navProperty)#>Reference.IsLoaded ? obj.<#=code.Escape(navProperty)#> : null))<#
					}

				}
			}
#>;
				
			// Reverse config (dto => entity)
			AutoMapper.Mapper.CreateMap<<#= code.Escape(entity) #>Dto, <#= code.Escape(entity) #>>();

<#
			}
#>
		}
	}
}

